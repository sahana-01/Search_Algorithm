from collections import deque

def bfs(graph, start):
    visited = set()             # Keep track of visited nodes
    queue = deque([start])      # Initialize the queue with the starting node
    
    while queue:
        node = queue.popleft()  # Dequeue the next node
        if node not in visited:
            print(node)         # Process the node (you can replace this with your desired action)
            visited.add(node)   # Mark the node as visited
            queue.extend(graph[node] - visited)  # Enqueue unvisited neighbors

# Example usage:
graph = {
    'S': {'A','B', 'C'},
    'A': {'S','D', 'E'},
    'B': {'S','F', 'G'},
    'C': {'S','H', 'J'},
    'D': {'A','K'},
    'E': {'M', 'A'},
    'F': {'B','O'},
    'G': {'B','O','H'},
    'H': {'G','C'},
    'J': {'C','R','T'},
    'K': {'D', 'M'},
    'M': {'E','O'},
    'O': {'F','G'},
    'R': {'J','T'},
    'T': {'R','J'},

}

bfs(graph, 'G')
